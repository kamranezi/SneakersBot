# import telebot
# from telebot import types
# import firebase_admin
# from firebase_admin import credentials, db
#
# # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É JSON —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Firebase
# cred = credentials.Certificate('sneakers-5c581-firebase-adminsdk-y2ktp-9b9880fab5.json')
#
# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK
# firebase_admin.initialize_app(cred, {
#     'databaseURL': 'https://sneakers-5c581-default-rtdb.europe-west1.firebasedatabase.app/'
# })
#
# # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ —É–∑–µ–ª 'items'
# ref = db.reference('items')
#
# # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# user_data = {}
#
# bot = telebot.TeleBot('6662518155:AAHlwCxFLsS-uXWmEq3XByDj9nRSFF40Wdg')
# def show_start_menu(chat_id):
#     markup = types.InlineKeyboardMarkup()
#     category_button = types.InlineKeyboardButton("üëü –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='category')
#     fav_button = types.InlineKeyboardButton("‚ù§Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
#                                              web_app=types.WebAppInfo(url="https://sneakers-5c581.firebaseapp.com/favorites"))
#     menu_button = types.InlineKeyboardButton("üìñ –û—Ç–∫—Ä—ã—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω  ", web_app=types.WebAppInfo(
#         url="https://sneakers-5c581.firebaseapp.com"))
#     markup.add(category_button)
#     markup.add(fav_button)
#     markup.add(menu_button)
#
#     bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)
#
# @bot.message_handler(commands=['start'])
# def start(message):
#     # –°–±—Ä–æ—Å–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã /start
#     user_data[message.chat.id] = {}
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
#     photo_url = 'https://shopozz.ru/images/articles/article-1090/p1gt8ijduds7qdu615tql0ig8l3.jpg'
#     bot.send_photo(message.chat.id, photo_url, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫—Ä–æ—Å—Å–æ–≤–æ–∫!")
#
#     # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
#     show_start_menu(message.chat.id)
#
# @bot.callback_query_handler(func=lambda call: call.data == 'category')
# def handle_category(call):
#     show_available_categories_inline(call.message)
# # @bot.message_handler(content_types=['text'])
# # def handle_text(message):
# #     if message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º":
# #         bot.send_message(message.chat.id, "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º: @kamranezi")
# #     elif message.text == "–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º":
# #         bot.send_message(message.chat.id, "–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º: +79183083345")
# # @bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
# # def handle_category_selection(call):
# #     category = call.data.split('_')[1]
# def show_available_categories_inline(message):
#     # –ü–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Firebase
#     categories_set = set()
#     catalog_data = ref.get()
#
#     if catalog_data:
#         for details in catalog_data:
#             if details is not None and 'category' in details and not details.get('available', True):
#                 categories_set.add(details['category'])
#
#     # –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
#     inline_markup = types.InlineKeyboardMarkup(row_width=1)
#     for category in categories_set:
#         button = types.InlineKeyboardButton(text=category, callback_data=f"category_{category}")
#         inline_markup.add(button)
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
#     show_all_button = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ', callback_data='show_all')
#     inline_markup.add(show_all_button)
#
#     bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=inline_markup)
#
# @bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
# def handle_category_callback(call):
#     category = call.data.replace('category_', '')
#     user_data[call.message.chat.id]['selected_category'] = category
#     show_catalog_inline(call.message)
#
# @bot.callback_query_handler(func=lambda call: call.data == 'show_all')
# def handle_show_all_callback(call):
#     user_data[call.message.chat.id].pop('selected_category', None)
#     show_catalog_inline(call.message)
#
# def show_catalog_inline(message):
#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
#     catalog_data = ref.get()
#
#     if catalog_data is None:
#         catalog_data = []  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
#
#     # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     selected_availability = user_data[message.chat.id].get('selected_availability', False)
#     selected_category = user_data[message.chat.id].get('selected_category')
#
#     for index, details in enumerate(catalog_data):
#         # –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ
#         if details is None or (selected_availability != details.get('available', False)) or (
#                 selected_category and details.get('category') != selected_category):
#             continue
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å —Ñ–æ—Ç–æ –∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–æ–π
#         photo_url = details['image_urls'][0]
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
#         if index not in user_data[message.chat.id].get('detailed_buttons', []):
#             # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É —Å —Ç–æ–≤–∞—Ä–æ–º
#             item_button = types.InlineKeyboardButton(
#                 text=f"{details['title']} - {details['price']} ‚û°Ô∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
#                 callback_data=str(index)
#             )
#             keyboard = types.InlineKeyboardMarkup()
#             keyboard.add(item_button)
#
#             # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
#             bot.send_photo(message.chat.id, photo_url, reply_markup=keyboard)
#
#             # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
#             user_data[message.chat.id].setdefault('detailed_buttons', []).append(index)
#
# @bot.callback_query_handler(func=lambda call: True)
# def callback_query(call):
#     index = int(call.data)
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     user_data[call.message.chat.id]['selected_item'] = index
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
#     details = ref.child(str(index)).get()
#
#     if details is not None:
#         photo_urls = details.get('image_urls', [])
#
#         media_list = [types.InputMediaPhoto(media=url) for url in photo_urls]
#
#         bot.send_media_group(call.message.chat.id, media=media_list)
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Ü–µ–Ω—ã)
#         send_full_product_info(call.message.chat.id, index)
#
#         # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
#         back_button = types.KeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
#         size_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         size_keyboard.add(back_button)
#         # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ –ø–∞—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
#         sizes = details.get('sizes', {})
#         for us_size, eu_size in zip(sizes.get('US', []), sizes.get('EU', [])):
#             size_button = types.KeyboardButton(f"{us_size} / {eu_size}")
#             size_keyboard.row(size_button)
#
#         bot.send_message(call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=size_keyboard)
#         bot.register_next_step_handler(call.message, choose_payment_method)
#
# def send_full_product_info(chat_id, index):
#     details = ref.child(str(index)).get()
#
#     if details is not None:
#         description = details.get('description', '')
#         price = details.get('price', '')
#
#         full_info_text = f"{details.get('title', '')}\n{description}\n\n–¶–µ–Ω–∞: {price}"
#
#         bot.send_message(chat_id, full_info_text)
#
# def choose_payment_method(message):
#     if message.text == '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞':
#         show_start_menu(message.chat.id)  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
#     else:
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         btn2 = types.KeyboardButton('–ù–∞–ª–∏—á–Ω—ã–µ')
#         btn3 = types.KeyboardButton('Wallet Pay')
#         markup.row(btn2, btn3)
#
#         bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', reply_markup=markup)
#         bot.register_next_step_handler(message, choose_delivery_method)
#
# def choose_delivery_method(message):
#     if message.text == '–ù–∞–ª–∏—á–Ω—ã–µ':
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         btn1 = types.KeyboardButton('–°–∞–º–æ–≤—ã–≤–æ–∑')
#         btn2 = types.KeyboardButton('–î–æ—Å—Ç–∞–≤–∫–∞')
#         markup.row(btn1, btn2)
#
#         bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=markup)
#         bot.register_next_step_handler(message, handle_delivery_choice)
#     elif message.text == 'Wallet Pay':
#         process_wallet_payment(message)
#     else:
#         # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
#         pass
#
# def process_wallet_payment(message):
#     # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Wallet Pay
#     bot.send_message(message.chat.id, '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Wallet Pay —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
#
# def handle_delivery_choice(message):
#     if message.text == '–°–∞–º–æ–≤—ã–≤–æ–∑':
#         # –ó–∞–º–µ–Ω–∏–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –Ω–æ–≤—ã–µ
#         location_text = '–¢–±–∏–ª–∏—Å–∏, –ß–∞–≤—á–∞–≤–∞–¥–∑–µ 17'
#         location_url = 'https://maps.google.com/maps?q=41.709672,44.770749&ll=41.709672,44.770749&z=16'
#         bot.send_message(message.chat.id, f'{location_text}\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è Google Maps: {location_url}')
#     elif message.text == '–î–æ—Å—Ç–∞–≤–∫–∞':
#         # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
#         pass
#
# # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# bot.polling(none_stop=True)
